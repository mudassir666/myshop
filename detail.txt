1) Branch master :

video 3 : defining a data model 
1) created a models -> product.dart : blueprint
2) created a screens -> product_overview_screen
3) created a widgets folder

2) Branch video 4 to 10 :

video 4 : 
1) product_overview_screen : 
= gridview.builder
= gridDelegate: SliverGridDelegateWithFixedCrossAxisCount
2) create a widget Product_item : 
= gridtile
= gridtilebar 

video 5:
1) main -> fonts from assets\fonts store in pubspec.yaml
2) product_item : 
= ClipRRect -> to give rounded border , its child is gridtile 
= color icons

video 6:   
                              key                                 value
1) main -> routes { ProductDetailScreen.routeName : (ctx) => ProductDetailScreen() }
2) product_item :
= GestureDetector
= Navigator.of(context).pushNamed ( routename and arrgument )
3) created a screen -> product_detail_screen :
= ModalRoute.of(context)!.settings.arguments  -> to fetch arrguments  

video 9 : working with providers and listeners
1) create providers folder -> products_provider file -> Products class :
= Product class is combine with changeNotifier through mixin
= list of _items which are private 
= to access private list we created getter
= to add product we created function with notifylistener so it could tell all the listers to rebuild widget
2) main -> Wrape Materialapp with ChangeNotifierProvider 
= to listen we need to wrape the child with ChangeNotifierProvider , so it could listen and change the listing widgets
= which class we are listenig ->   create: (ctx) => Products()
3) ProductsOverviewScreen -> we created a ProductsGrid class because we dont need to rebuild the widget tree , we will just rebuild the productGrid whenever it will listen 
= created ProductsGrid -> with a listner -> Provider.of<Products>(context) -> which could access the Products class items and functions

video 11: Listrning in Different places and ways   
                           
1) Product_detail_screen -> use Provider.of<Products>(context) to access product_provider class
= To access the specific product from the item list :

////////////////////////////////logic by me////////////////////////////////////

    final product_provider = Provider.of<Products>(context);
    final product = product_provider.items.firstWhere((product) => product.id == productId);

    //////////////////////////////////his first logic/////////////////////////

      final loadedProduct = Provider.of<Products>(context).items.firstWhere((prod) => prod.id == productId);

    ///////////////////////////////////his second logic/////////////////////// from products_provider

    final loadedProduct = Provider.of<Products>(context,listen: false).findById(productId);

= listen: false = to aviod rebuild because we just need data one time

2) products_provider -> function to find the product from item by matching ids :

=  Product findById(String id) {
    return _items.firstWhere((prod) => prod.id == id);
  }
 
video 12 : Using Nested Models and Providers  
   
1) Shift products_provider.dart into models

2) Product.dart -> add a ChangeNotifier with Product class :
= create a function :  
void toggleFavoriteStatus() {
    // if it is true it will return false and if it is false it will return true
    isFavorite = !isFavorite;
    notifyListeners();
  }

3) Products_grid -> add a ChangeNotifierProvider on ProductItem because we want to listen single product
= create: (c) => products[index]   : which means we are accessing single Product of Product class

4) Product_item -> delete the constructor because we are accessing the product items from provider
= change an icons of favorite and add a function.

video 13 : Exploring alternative provider syntaxes   
   
1) ChangeNotifierProvider.value : to use provider on grid or list use .value , by this provider works well when the data changes for a widget

= to reuse existing object use ChangeNotifierProvider.value

2) ChangeNotifierProvider : whenever to create a new object/instant based on a class use ChangeNotifierProvider . it is used for parent and not to reuse existing object

3) ChangeNotifierProvider automatically dispose the data which has been storing

4) products_grid.dart : 
ChangeNotifierProvider.value(
        // here we just wants to listen single product
        value: products[index],
        child: ProductItem(),
      )
